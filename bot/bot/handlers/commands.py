import asyncio

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    Update,
)
from telegram.ext import (
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from bot.utils import api, logger

(
    CHOOSING_PROJECT,
    CHOOSING_BOARD,
    CHOOSING_SORT_COLUMN,
    CHOOSING_COLUMN,
    ENTER_TITLE,
    ENTER_DESCRIPTION,
    CHOOSING_ASSIGNEE,
    ENTER_DUE_DATE,
    CHOOSING_TYPE,
) = range(9)


async def stop_polling(context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å."""
    task: asyncio.Task = context.user_data.get("poll_task")
    if task and not task.done():
        logger.logger.info("Stopping existing poll task")
        task.cancel()
        try:
            await task
        except asyncio.CancelledError:
            pass
        context.user_data["poll_task"] = None
    else:
        logger.logger.info("No active poll task to stop")


async def change_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await stop_polling(context)
    context.user_data.pop("selected_project", None)
    context.user_data.pop("selected_board", None)

    # –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ (–∫–∞–∫ –≤ start)
    projects_response = api.get_projects()
    if not projects_response or "projects" not in projects_response:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤."
        )
        return ConversationHandler.END

    projects: list = projects_response["projects"]
    project_data = [
        (p.get("name"), p.get("id")) for p in projects if "name" in p
    ]

    if not project_data:
        await update.message.reply_text("–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    context.user_data["projects"] = project_data
    project_names = [p[0] for p in project_data]

    keyboard = []
    row = []
    for i, name in enumerate(project_names, 1):
        row.append(KeyboardButton(str(name)))
        if i % 5 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    reply_markup = ReplyKeyboardMarkup(
        keyboard, one_time_keyboard=True, resize_keyboard=True
    )

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:", reply_markup=reply_markup
    )
    return CHOOSING_PROJECT


async def change_board(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await stop_polling(context)
    await update.message.reply_text("üîÑ –í—ã —Ä–µ—à–∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –¥–æ—Å–∫—É.")

    project = context.user_data.get("selected_project")
    if not project:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç.")
        await start(update, context)
        return CHOOSING_PROJECT  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ —ç—Ç–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ start

    project_id = project["id"]
    boards_response = api.get_boards(project_id=project_id)

    if boards_response.get("success") and "boards" in boards_response:
        boards_data = boards_response["boards"]
        context.user_data["boards"] = boards_data

        board_names = [
            str(board.get("name", "Unnamed")) for board in boards_data
        ]
        keyboard = [[KeyboardButton(name)] for name in board_names]

        reply_markup = ReplyKeyboardMarkup(
            keyboard, one_time_keyboard=True, resize_keyboard=True
        )

        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project['name']}:",
            reply_markup=reply_markup,
        )
        return CHOOSING_BOARD
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫.")
        return ConversationHandler.END


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    projects_response = api.get_projects()
    if not projects_response or "projects" not in projects_response:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤."
        )
        return ConversationHandler.END

    projects: list = projects_response["projects"]
    project_data = [
        (p.get("name"), p.get("id")) for p in projects if "name" in p
    ]

    if not project_data:
        await update.message.reply_text("–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    context.user_data["projects"] = project_data
    project_names = [p[0] for p in project_data]
    keyboard = []
    row = []

    for i, name in enumerate(project_names, 1):
        row.append(KeyboardButton(str(name)))
        if i % 5 == 0:
            keyboard.append(row)
            row = []

    if row:
        keyboard.append(row)

    reply_markup = ReplyKeyboardMarkup(
        keyboard, one_time_keyboard=True, resize_keyboard=True
    )

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
        reply_markup=reply_markup,
    )

    return CHOOSING_PROJECT


async def choose_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    project_name = update.message.text
    projects = context.user_data.get("projects", [])

    project_id = None
    for name, pid in projects:
        if name == project_name:
            project_id = pid
            break

    if project_id is None:
        await update.message.reply_text(
            "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return CHOOSING_PROJECT

    context.user_data["selected_project"] = {
        "name": project_name,
        "id": project_id,
    }

    boards_response = api.get_boards(project_id=project_id)

    if boards_response.get("success") and "boards" in boards_response:
        boards_data = boards_response["boards"]
        context.user_data["boards"] = boards_data

        board_names = [
            str(board.get("name", "Unnamed")) for board in boards_data
        ]

        keyboard = [[KeyboardButton(name)] for name in board_names]

        reply_markup = ReplyKeyboardMarkup(
            keyboard, one_time_keyboard=True, resize_keyboard=True
        )

        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç: {project_name}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å–∫—É:",
            reply_markup=reply_markup,
        )
    else:
        error_message = boards_response.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫: {error_message}"
        )
        return ConversationHandler.END

    return CHOOSING_BOARD


async def poll_board_updates(chat_id, project_id, board_id, context):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
    tasks_state = {}
    column_names = {}

    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            columns_response = api.get_boardColumn_list(board_id)
            if (
                columns_response.get("success")
                and "boardColumns" in columns_response
            ):
                column_names = {
                    col["id"]: col["name"]
                    for col in columns_response["boardColumns"]
                }

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
            response = api.get_tasks(projectId=project_id, boardId=board_id)
            if not response.get("success") or "tasks" not in response:
                await asyncio.sleep(2)
                continue

            tasks = response["tasks"]
            current_ids = set()

            for task in tasks:
                task_id = task["id"]
                current_ids.add(task_id)

                col_id = task.get("boardColumnId")
                col_name = column_names.get(col_id, f"–ö–æ–ª–æ–Ω–∫–∞ {col_id}")

                snapshot = {
                    "title": task.get("title"),
                    "description": task.get("description"),
                    "boardColumn": col_name,
                    "isCompleted": task.get("isCompleted"),
                    "isDeleted": task.get("isDeleted"),
                }

                if task_id not in tasks_state:
                    tasks_state[task_id] = snapshot
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {snapshot['title']} (–≤ {snapshot['boardColumn']})",
                    )
                else:
                    old = tasks_state[task_id]
                    changes = []
                    if old["title"] != snapshot["title"]:
                        changes.append(
                            f"‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {old['title']} ‚Üí {snapshot['title']}"
                        )
                    if old["description"] != snapshot["description"]:
                        changes.append("üìù –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
                    if old["boardColumn"] != snapshot["boardColumn"]:
                        changes.append(
                            f"üìÇ –ö–æ–ª–æ–Ω–∫–∞: {old['boardColumn']} ‚Üí {snapshot['boardColumn']}"
                        )
                    if old["isCompleted"] != snapshot["isCompleted"]:
                        changes.append(f"‚ö° –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è")
                    if (
                        old["isDeleted"] != snapshot["isDeleted"]
                        and snapshot["isDeleted"]
                    ):
                        changes.append("‚ùå –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")

                    if changes:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=f"üîî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {snapshot['title']}:\n"
                            + "\n".join(changes),
                        )
                        tasks_state[task_id] = snapshot

            # –£–¥–∞–ª—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            removed_ids = set(tasks_state.keys()) - current_ids
            for rid in removed_ids:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå –ó–∞–¥–∞—á–∞ {tasks_state[rid]['title']} –∏—Å—á–µ–∑–ª–∞",
                )
                del tasks_state[rid]

            await asyncio.sleep(2)

        except Exception as e:
            logger.logger.error(f"–û—à–∏–±–∫–∞ –≤ poll_board_updates: {e}")
            await context.bot.send_message(
                chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
            )
            await asyncio.sleep(5)  # –≤–º–µ—Å—Ç–æ break –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            continue


async def choose_board(update: Update, context: ContextTypes.DEFAULT_TYPE):
    board_name = update.message.text
    boards = context.user_data.get("boards", [])
    logger.logger.info(f"choose_board called with board_name: {board_name}")

    board_id = None
    for board in boards:
        if board.get("name") == board_name:
            board_id = board.get("id")
            break

    if board_id is None:
        await update.message.reply_text(
            "–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return CHOOSING_BOARD

    context.user_data["selected_board"] = {"name": board_name, "id": board_id}
    project_id = context.user_data["selected_project"]["id"]
    chat_id = update.effective_chat.id
    logger.logger.info(
        f"Selected board: {board_name} (ID: {board_id}), chat_id: {chat_id}"
    )

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π polling
    await stop_polling(context)

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    keyboard = ReplyKeyboardMarkup(
        [
            ["üîÑ –ü–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç", "üîÑ –ü–æ–º–µ–Ω—è—Ç—å –¥–æ—Å–∫—É"],
            ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏"],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
    )

    await update.message.reply_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ—Å–∫—É: {board_name} (ID: {board_id})",
        reply_markup=keyboard,
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = context.application.create_task(
        poll_board_updates(chat_id, project_id, board_id, context)
    )
    context.user_data["poll_task"] = task
    logger.logger.info(f"Started poll task for board_id: {board_id}")

    await update.message.reply_text(f"–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞—Å–∫ –¥–ª—è –¥–æ—Å–∫–∏ {board_id}...")
    return ConversationHandler.END


async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å polling, –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –Ω–∏–º
    # await stop_polling(context)

    project = context.user_data.get("selected_project")
    board = context.user_data.get("selected_board")
    if not project or not board:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏ –¥–æ—Å–∫—É.")
        await start(update, context)
        return CHOOSING_PROJECT

    board_id = board["id"]
    columns_response = api.get_boardColumn_list(board_id)

    if columns_response.get("success") and "boardColumns" in columns_response:
        columns_data = columns_response["boardColumns"]
        context.user_data["columns"] = columns_data

        column_names = [
            str(column.get("name", "Unnamed")) for column in columns_data
        ]
        if not column_names:
            await update.message.reply_text(
                "–ö–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –¥–æ—Å–∫–∏."
            )
            return ConversationHandler.END

        keyboard = [[KeyboardButton(name)] for name in column_names]

        reply_markup = ReplyKeyboardMarkup(
            keyboard, one_time_keyboard=True, resize_keyboard=True
        )

        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ –¥–æ—Å–∫–µ {board['name']}:",
            reply_markup=reply_markup,
        )
        return CHOOSING_COLUMN
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫.")
        return ConversationHandler.END


async def choose_column(update: Update, context: ContextTypes.DEFAULT_TYPE):
    column_name = update.message.text
    columns = context.user_data.get("columns", [])

    column_id = None
    for column in columns:
        if column.get("name") == column_name:
            column_id = column.get("id")
            break

    if column_id is None:
        await update.message.reply_text(
            "–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return CHOOSING_COLUMN

    context.user_data["selected_column"] = {
        "name": column_name,
        "id": column_id,
    }

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    reply_markup = ReplyKeyboardMarkup(
        [], resize_keyboard=True
    )  # –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª–æ–Ω–∫—É: {column_name}\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:",
        reply_markup=reply_markup,
    )
    return ENTER_TITLE


async def enter_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    title = update.message.text.strip()
    if not title:
        await update.message.reply_text(
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return ENTER_TITLE

    context.user_data["task_title"] = title

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '.' –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è):"
    )
    return ENTER_DESCRIPTION


async def enter_description(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    description = update.message.text.strip()
    if description == ".":
        description = ""

    context.user_data["task_description"] = description

    project_id = context.user_data["selected_project"]["id"]
    board_id = context.user_data["selected_board"]["id"]
    column_id = context.user_data["selected_column"]["id"]
    title = context.user_data["task_title"]

    # –ó–¥–µ—Å—å –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    create_response = api.create_task(
        project_id=project_id,
        column_id=column_id,
        title=title,
        description=description,
    )
    logger.logger.info(create_response)
    if create_response.get("success"):
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    else:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {create_response.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        )

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    context.user_data.pop("task_title", None)
    context.user_data.pop("task_description", None)
    context.user_data.pop("selected_column", None)
    context.user_data.pop("columns", None)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º persistent –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        [
            ["üîÑ –ü–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç", "üîÑ –ü–æ–º–µ–Ω—è—Ç—å –¥–æ—Å–∫—É"],
            ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏"],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
    )
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=keyboard)

    return ConversationHandler.END


async def show_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    task_id = query.data.replace("show_task_", "")
    project_id = context.user_data["selected_project"]["id"]
    board_id = context.user_data["selected_board"]["id"]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    task_response = api.get_task(
        task_id
    )  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ get_task
    if not task_response.get("success") or "task" not in task_response:
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
        return

    task = task_response["task"]
    col_id = task.get("boardColumnId")
    columns_response = api.get_boardColumn_list(board_id)
    column_names = {
        col["id"]: col["name"]
        for col in columns_response.get("boardColumns", [])
    }
    col_name = column_names.get(col_id, f"–ö–æ–ª–æ–Ω–∫–∞ {col_id}")

    message = (
        f"üìå {task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        f"–ö–æ–ª–æ–Ω–∫–∞: {col_name}\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.get('assignee', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
        f"–î–µ–¥–ª–∞–π–Ω: {task.get('dueDate', '–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞')}\n"
        f"–¢–∏–ø: {task.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–∞' if task.get('isCompleted') else '–ê–∫—Ç–∏–≤–Ω–∞'}\n"
    )

    await query.message.reply_text(message)


async def display_tasks(
    update: Update, context: ContextTypes.DEFAULT_TYPE, query=None
):
    if query:
        reply_func = query.message.reply_text
    else:
        reply_func = update.message.reply_text

    project_id = context.user_data["selected_project"]["id"]
    board_id = context.user_data["selected_board"]["id"]
    selected_column = context.user_data.get("selected_sort_column")
    sort_field = context.user_data.get("sort_field")
    filter_field = context.user_data.get("filter_field")
    filter_value = context.user_data.get("filter_value")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π
    try:
        columns_response = api.get_boardColumn_list(board_id)
        column_names = {}
        if (
            columns_response.get("success")
            and "boardColumns" in columns_response
        ):
            column_names = {
                col["id"]: col["name"]
                for col in columns_response["boardColumns"]
            }
        else:
            await reply_func("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫.")
            return ConversationHandler.END
    except Exception as e:
        logger.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫: {e}")
        await reply_func("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
    page = context.user_data.get("page", 1)
    per_page = 5  # —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    offset = (page - 1) * per_page
    try:
        response = api.get_tasks(
            projectId=project_id,
            boardId=board_id,
            perPage=per_page,
            offset=offset,
        )

        if not response.get("success") or "tasks" not in response:
            await reply_func("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")
            return ConversationHandler.END
    except Exception as e:
        logger.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        await reply_func("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")
        return ConversationHandler.END

    tasks = response["tasks"]

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–ª–æ–Ω–∫–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if selected_column:
        tasks = [
            task
            for task in tasks
            if task.get("boardColumnId") == selected_column["id"]
        ]

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ñ–∏–ª—å—Ç—Ä—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if filter_value is not None and filter_field:
        tasks = [
            task for task in tasks if task.get(filter_field) == filter_value
        ]

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    reverse = sort_field == "createdAt"
    tasks.sort(key=lambda x: x.get(sort_field, "") or "", reverse=reverse)

    if not tasks:
        await reply_func("–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        for task in tasks:
            col_id = task.get("boardColumnId")
            col_name = column_names.get(col_id, f"–ö–æ–ª–æ–Ω–∫–∞ {col_id}")
            title = task.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            assignee = task.get("assignee", "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
            due_date = task.get("dueDate", "–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞")
            task_type = task.get("type", "–ù–µ —É–∫–∞–∑–∞–Ω")
            status = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task.get("isCompleted") else "–ê–∫—Ç–∏–≤–Ω–∞"

            message = (
                f"üìå {title}\n"
                f"–ö–æ–ª–æ–Ω–∫–∞: {col_name}\n"
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee}\n"
                f"–î–µ–¥–ª–∞–π–Ω: {due_date}\n"
                f"–¢–∏–ø: {task_type}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"---\n"
            )

            keyboard = InlineKeyboardMarkup.from_button(
                InlineKeyboardButton(
                    "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é",
                    callback_data=f"show_task_{task['id']}",
                )
            )

            await reply_func(message, reply_markup=keyboard)

    # –û—á–∏—Å—Ç–∫–∞
    context.user_data.pop("sort_field", None)
    context.user_data.pop("filter_field", None)
    context.user_data.pop("filter_value", None)
    context.user_data.pop("selected_sort_column", None)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º persistent –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}")
        )
    if len(tasks) == per_page:  # –∑–Ω–∞—á–∏—Ç, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        pagination_buttons.append(
            InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page_{page+1}")
        )

    if pagination_buttons:
        await reply_func(
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}",
            reply_markup=InlineKeyboardMarkup([pagination_buttons]),
        )

    keyboard = ReplyKeyboardMarkup(
        [
            ["üîÑ –ü–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç", "üîÑ –ü–æ–º–µ–Ω—è—Ç—å –¥–æ—Å–∫—É"],
            ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏"],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
    )
    await reply_func("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    return ConversationHandler.END


async def handle_pagination(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()
    page = int(query.data.replace("page_", ""))
    context.user_data["page"] = page
    return await display_tasks(update, context, query=query)


async def handle_sorting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.logger.info(
        f"handle_sorting called with data: {query.data}"
    )  # –û—Ç–ª–∞–¥–∫–∞

    sort_type = query.data
    board_id = context.user_data["selected_board"]["id"]

    sort_field_map = {
        "sort_date": "createdAt",
        "sort_assignee": "assignee",
        "sort_dueDate": "dueDate",
        "sort_type": "type",
    }
    context.user_data["sort_field"] = sort_field_map[sort_type]
    if sort_type == "sort_date":
        context.user_data["filter_field"] = None
        context.user_data["filter_value"] = None
        return await display_tasks(update, context, query=query)
    else:
        context.user_data["filter_field"] = sort_field_map[sort_type]

    if sort_type == "sort_assignee":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        assignees_response = api.get_assignees(board_id)
        if (
            assignees_response.get("success")
            and "members" in assignees_response
        ):
            assignees = assignees_response["members"]
            keyboard = []
            for assignee in assignees:
                name = f"{assignee.get('firstName','')} {assignee.get('lastName','')}".strip()
                user_id = assignee.get("id")
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            name, callback_data=f"assignee_{user_id}"
                        )
                    ]
                )
            keyboard.append(
                [InlineKeyboardButton("–í—Å–µ", callback_data="assignee_all")]
            )
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
                reply_markup=InlineKeyboardMarkup(keyboard),
            )
            return CHOOSING_ASSIGNEE
        else:
            await query.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."
            )
            return ConversationHandler.END

    elif sort_type == "sort_dueDate":
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD) –∏–ª–∏ '.' –¥–ª—è –≤—Å–µ—Ö:"
        )
        return ENTER_DUE_DATE
    elif sort_type == "sort_type":
        keyboard = [
            [
                InlineKeyboardButton(
                    "–î–µ–π—Å—Ç–≤–∏–µ", callback_data="type_–î–µ–π—Å—Ç–≤–∏–µ"
                ),
                InlineKeyboardButton("–í—Å—Ç—Ä–µ—á–∞", callback_data="type_–í—Å—Ç—Ä–µ—á–∞"),
            ],
            [
                InlineKeyboardButton("–ó–≤–æ–Ω–æ–∫", callback_data="type_–ó–≤–æ–Ω–æ–∫"),
                InlineKeyboardButton("–í—Å–µ", callback_data="type_all"),
            ],
        ]
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:", reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHOOSING_TYPE


async def choose_assignee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    assignee_data = query.data.replace("assignee_", "")
    if assignee_data == "all":
        context.user_data["filter_value"] = None
    else:
        context.user_data["filter_value"] = assignee_data  # user_id

    # –¢–µ–ø–µ—Ä—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–æ task["assigneeId"]
    context.user_data["filter_field"] = "assigneeId"

    return await display_tasks(update, context, query=query)


async def enter_due_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date = update.message.text.strip()
    if date == ".":
        context.user_data["filter_value"] = None
    else:
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ
        context.user_data["filter_value"] = date

    return await display_tasks(update, context)


async def choose_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    type_data = query.data.replace("type_", "")
    if type_data == "all":
        context.user_data["filter_value"] = None
    else:
        context.user_data["filter_value"] = (
            type_data.lower()
        )  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–∏–ø—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –≤ –∑–∞–¥–∞—á–∞—Ö

    return await display_tasks(update, context, query=query)


async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.logger.info("show_tasks called")  # –û—Ç–ª–∞–¥–∫–∞
    project = context.user_data.get("selected_project")
    board = context.user_data.get("selected_board")
    if not project or not board:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏ –¥–æ—Å–∫—É.")
        await start(update, context)
        return CHOOSING_PROJECT

    board_id = board["id"]
    columns_response = api.get_boardColumn_list(board_id)

    if columns_response.get("success") and "boardColumns" in columns_response:
        columns_data = columns_response["boardColumns"]
        context.user_data["columns"] = columns_data

        column_names = [
            str(column.get("name", "Unnamed")) for column in columns_data
        ]
        if not column_names:
            await update.message.reply_text(
                "–ö–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –¥–æ—Å–∫–∏."
            )
            return ConversationHandler.END

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–í—Å–µ –∫–æ–ª–æ–Ω–∫–∏"
        column_names.append("–í—Å–µ –∫–æ–ª–æ–Ω–∫–∏")
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"column_{name}")]
            for name in column_names
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á (–∏–ª–∏ '–í—Å–µ –∫–æ–ª–æ–Ω–∫–∏'):",
            reply_markup=reply_markup,
        )
        return CHOOSING_SORT_COLUMN
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫.")
        return ConversationHandler.END


async def choose_sort_column(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()
    logger.logger.info(
        f"choose_sort_column called with data: {query.data}"
    )  # –û—Ç–ª–∞–¥–∫–∞

    column_name = query.data.replace("column_", "")
    columns = context.user_data.get("columns", [])

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–í—Å–µ –∫–æ–ª–æ–Ω–∫–∏", –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–ª–æ–Ω–∫–µ
    if column_name == "–í—Å–µ –∫–æ–ª–æ–Ω–∫–∏":
        context.user_data["selected_sort_column"] = None
    else:
        column_id = None
        for column in columns:
            if column.get("name") == column_name:
                column_id = column.get("id")
                break
        if column_id is None:
            await query.message.reply_text(
                "–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return CHOOSING_SORT_COLUMN
        context.user_data["selected_sort_column"] = {
            "name": column_name,
            "id": column_id,
        }

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("–ü–æ –¥–∞—Ç–µ", callback_data="sort_date"),
                InlineKeyboardButton(
                    "–ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", callback_data="sort_assignee"
                ),
            ],
            [
                InlineKeyboardButton(
                    "–ü–æ –¥–µ–¥–ª–∞–π–Ω—É", callback_data="sort_dueDate"
                ),
                InlineKeyboardButton("–ü–æ —Ç–∏–ø—É", callback_data="sort_type"),
            ],
        ]
    )

    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á:", reply_markup=keyboard
    )
    return CHOOSING_SORT_COLUMN


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º ConversationHandler
start_conv = ConversationHandler(
    entry_points=[
        CommandHandler("start", start),
        MessageHandler(filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç$"), change_project),
        MessageHandler(filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –¥–æ—Å–∫—É$"), change_board),
        MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task),
        MessageHandler(filters.Regex("^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), show_tasks),
    ],
    states={
        CHOOSING_PROJECT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, choose_project),
            MessageHandler(
                filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç$"), change_project
            ),
            MessageHandler(filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –¥–æ—Å–∫—É$"), change_board),
            MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task),
            MessageHandler(filters.Regex("^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), show_tasks),
        ],
        CHOOSING_BOARD: [
            MessageHandler(
                filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç$"), change_project
            ),
            MessageHandler(filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –¥–æ—Å–∫—É$"), change_board),
            MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task),
            MessageHandler(filters.Regex("^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), show_tasks),
            MessageHandler(filters.TEXT & ~filters.COMMAND, choose_board),
        ],
        CHOOSING_SORT_COLUMN: [
            CallbackQueryHandler(choose_sort_column, pattern="^column_"),
            CallbackQueryHandler(handle_sorting, pattern="^sort_"),
            MessageHandler(
                filters.Regex("^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), show_tasks
            ),  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            MessageHandler(
                filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç$"), change_project
            ),
            MessageHandler(filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –¥–æ—Å–∫—É$"), change_board),
            MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task),
            CallbackQueryHandler(handle_pagination, pattern="^page_"),
        ],
        CHOOSING_COLUMN: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, choose_column),
            MessageHandler(
                filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç$"), change_project
            ),
            MessageHandler(filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –¥–æ—Å–∫—É$"), change_board),
            MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task),
            MessageHandler(filters.Regex("^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), show_tasks),
        ],
        ENTER_TITLE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, enter_title),
            MessageHandler(
                filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç$"), change_project
            ),
            MessageHandler(filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –¥–æ—Å–∫—É$"), change_board),
            MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task),
            MessageHandler(filters.Regex("^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), show_tasks),
        ],
        ENTER_DESCRIPTION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, enter_description),
            MessageHandler(
                filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç$"), change_project
            ),
            MessageHandler(filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –¥–æ—Å–∫—É$"), change_board),
            MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task),
            MessageHandler(filters.Regex("^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), show_tasks),
        ],
        CHOOSING_ASSIGNEE: [
            CallbackQueryHandler(choose_assignee, pattern="^assignee_"),
            MessageHandler(
                filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç$"), change_project
            ),
            MessageHandler(filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –¥–æ—Å–∫—É$"), change_board),
            MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task),
            MessageHandler(filters.Regex("^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), show_tasks),
            CallbackQueryHandler(handle_pagination, pattern="^page_"),
        ],
        ENTER_DUE_DATE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, enter_due_date),
            MessageHandler(
                filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç$"), change_project
            ),
            MessageHandler(filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –¥–æ—Å–∫—É$"), change_board),
            MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task),
            MessageHandler(filters.Regex("^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), show_tasks),
            CallbackQueryHandler(handle_pagination, pattern="^page_"),
        ],
        CHOOSING_TYPE: [
            CallbackQueryHandler(choose_type, pattern="^type_"),
            MessageHandler(
                filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç$"), change_project
            ),
            MessageHandler(filters.Regex("^üîÑ –ü–æ–º–µ–Ω—è—Ç—å –¥–æ—Å–∫—É$"), change_board),
            MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task),
            MessageHandler(filters.Regex("^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), show_tasks),
            CallbackQueryHandler(handle_pagination, pattern="^page_"),
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)
